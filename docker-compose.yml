services:
  minio:
    container_name: minio_bucket
    image: bitnami/minio:latest
    volumes:
      - minio_data:/data
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_USE_SSL: "${MINIO_USE_SSL}"
      MINIO_DEFAULT_BUCKETS: "${MINIO_BUCKET_NAME}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 5s
    expose:
      - "9000"
    ports:
      - "9000:9000" # Minio все еще доступен на 9000

  postgres:
    container_name: postgres_database
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      TZ: UTC
      PGTZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    expose:
      - "5432"
    ports:
      - "5433:5432"

  backend:
    container_name: backend_go
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        REPO_URL_BACKEND: ${REPO_URL_BACKEND}
    # УДАЛЯЕМ ПРОБРОС ПОРТА 443 НА ХОСТ ДЛЯ БЭКЕНДА
    # ports:
    #   - "443:443"
    # Бэкенд будет доступен только внутри Docker сети по имени сервиса 'backend' на порту 443 (HTTPS)
    expose:
      - "443" # Expose порт для внутренней сети Docker
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    healthcheck:
      test: ["CMD", "curl", "-k -f", "https://localhost:443/health"] # Проверка HTTPS внутри контейнера
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${API_CONFIG_FILE_PATH:-/dev/null}:/configs/config.json:ro
      - ./certs/:/app/certs/:ro # Монтируем сертификаты для бэкенда, так как он все еще будет слушать HTTPS

  frontend:
    container_name: frontend_react
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: "${VITE_API_URL}"
        REPO_URL_FRONT: ${REPO_URL_FRONT}
    ports:
      - "443:443" # ТОЛЬКО ФРОНТЕНД (NGINX) ПРОБРАСЫВАЕТ ПОРТ 443 НА ХОСТ
    depends_on:
      # Зависимость от бэкенда для Nginx не критична для запуска Nginx,
      # но важна, чтобы API был доступен. Лучше проверять через Nginx.
      # Но для порядка оставим.
      backend:
        condition: service_healthy # Если бэкенд упадет, Nginx будет пытаться проксировать на упавший бэкенд.
        # Это означает, что фронтенд может работать, но API нет.
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-k -f", "https://localhost:443"] # ИСПРАВЛЕН на HTTPS
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs/:/etc/nginx/certs/:ro # Монтируем сертификаты для Nginx

volumes:
  minio_data:

  postgres_data: